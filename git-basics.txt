1.  git config ==> to set the configuration of the git repo 
        1.  git config --global user.name <Username>
        2.  git config --global user.email <email>

    if username and email is not set then use this
        3.  git config --global --add safe.directory D:/programming/git-repo

    to use vs code as git editor use 
        4.  git config --global core.editor "code --wait"

    to change global config use
        6.  git config --global -e

2.  git init ==> to initialized a git repo ==> 
        7.  git init

3.  git add ==> to add all or some files to the staging area which are tracked by git
        8.  git add .          ==> to include all the files
        9.  git add <filename> ==> to include a single file

    to revert this use
        10. git rm --cached <filename> || git reset

4.  git commit ==> to save the currently staged files
        11. git commit -m "custom message".
        12. git commit -am "commit message" ==> adds and commit all the staged changes.
        13. git commit --amend              ==>  a convenient way to modify the most recent commit. 
                                                 It lets you combine staged changes with the previous commit instead of creating an entirely new commit. It can also be used to simply edit the previous commit message without changing its snapshot. But, amending does not just alter the most recent commit, it replaces it entirely, meaning the amended commit will be a new entity with its own ref.

                --no-edit ==> flag will allow you to make the amendment to your commit without changing its commit message.
                -m => let's you pass a new message.
            """""""warning""""""" => should not apply for main branch or on a branch on which other programmers are rely on.

5.  git log,
    git status ==> in order to inspect commit history and current working directory
        14. git status         ==> to check the state of the files in the current working directory
        15. git log            ==> Display the entire commit history using the default formatting
        16. git log -n <limit> ==> Limit the number of commits shown
        17. git log --oneline  ==> to see some basic info about the commit.
        18. git log --graph --decorate --oneline
        19. git log --pretty=oneline

6.  git tag ==> when you have reached a significant stage of your development and you want to commit this point with a special
                name then use tags.

        20. git tag <tagname>                        ==> tagname generally some version number and like that, creates a lightweight tag.
        21. git tag -a <tagname> -m "custom message" ==> to create an annotated tag, best for public use
        22. git tag                                  ==> list out all the tags.
        23. git tag -l *some common word or wild card expression* 
        24. git tag -a <tagname> <old commit hash>   ==>  to create a tag from old commit
        25. git checkout <tagname>                   ==> goes into a detached head mode.
        24. git tag -d <tagname>                     ==> to delete a tag

7.  git branch ==>  A branch represents an independent line of development.
                    Git branches are ""effectively a pointer to a snapshot"" of your changes. When you want to add a new feature or fix a bug—no matter how big
                    or how small—you spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your future's history before merging it into the main branch.

        25. git branch ==> list out all the branches
        26. git branch <branch> ==> creates a branch
        27. git branch -d <branch> ==> deletes a branch
        28. git branch -D <branch> ==> deletes a branch with unmerged commits
        29. git branch -m <branch> ==> rename the current branch
    working with remote repo:
    ****    git branch -r ==> to see all the remote repo's branch
        30. git branch -a ==> list out all the remote branches.
        31. git push <remote-repo> crazy-experiment ==> pushes the crazy-experiment branch to new-remote-repo
        32. git push <remote-repo> --delete <branch> ==> push a delete signal to the remote origin repository that triggers a delete operation.

8.  git checkout ==> used to switch between different branches

        33. git checkout ＜new-branch＞ => switches from one branch to another
        34. git checkout -b ＜new-branch＞ ==> creates and checks out ＜new-branch＞
        35. git checkout -b ＜new-branch＞ ＜existing-branch＞ ==> ＜existing-branch＞ is passed which then bases new-branch off
                                                                   of existing-branch instead of the current HEAD 
        36. git checkout <commit hash> ==>  This makes your working directory match the exact state of the <commit hash> commit.
            """"note"""" => here now whatever you do nothing will reflect to your main code base as you are in a """"detached head state"""",
    so, start a new branch from here using
        ### git switch -c <new-branch-name>
            detached Head state:
                This puts the repo in a detached HEAD state. This means any changes made will not update the tag. They will create a new detached commit. This new detached commit will not be part of any branch and will only be reachable directly by the commits SHA hash. Therefore it is a best practice to create a new branch anytime you're making changes in a detached HEAD state.

        37. git checkout - ==> to go back to master from any branch
    working with remote repository
        38. git fetch --all """to use""" git checkout ＜remotebranch＞
        39. git checkout -b ＜remotebranch＞ origin/＜remotebranch＞

9.  git merge ==>   is used to combine two branches
                    it is important that before merging with any branch, you need to be at the head of that branch with which
                    you want to merge. 

        40. git merge ＜new-branch＞
        41. git merge --no-ff <branch> ==>  merges the specified branch into the current branch, but always generates a merge
                                            commit (even if it was a fast-forward merge). This is useful for documenting all merges that occur in your repository.

10. git rebase ==>  to maintain a linear project history
                    it mainly means that you can change the base commit from which a new branch has spawned up
                    to a new base commit.

        42. git rebase <base>

11. git clean ==> to completely delete the untracked files

        43.  git clean -f ==> -f is necessary to execute the command

12. git revert ==> reverts back all the changes saved due to a particular commit

        44. git revert head/commit hash / head~<position-count from head>

        git revert vs git reset:
            Reverting has two important advantages over resetting. First, it doesn’t change the project history, which makes it a “safe” operation for commits that have already been published to a shared repository. For details about why altering shared history is dangerous, please see the git reset page.

            Second, git revert is able to target an individual commit at an arbitrary point in the history, whereas git reset can only work backward from the current commit. For example, if you wanted to undo an old commit with git reset, you would have to remove all of the commits that occurred after the target commit, remove it, then re-commit all of the subsequent commits. Needless to say, this is not an elegant undo solution.

13. git remote ==> for communicating with remote repositories

        45. git remote ==> to list out all remote connections that you have with other repo
        46. git remote -v ==> same as the above but it also includes all the respective urls
        46. git remote add <name> <URL> ==> to add a new connection
        47. git remote rm <name> ==> to remove a connection
        48. git remote rename <old-name> <new-name> ==> to rename an existing connection

14. git fetch ==> a safe option to explore what others in your team has been doing without effecting your own local repo

        49. git fetch <remote> ==> fetches all the branches
        50. git fetch <remote> <branch> ==> Same as the above command, but only fetch the specified branch
        51. git fetch --all ==> fetches all registered remotes and their branches
        

        git fetch vs git pull:

            When downloading content from a remote repo, git pull and git fetch commands are available to accomplish the task. You can consider git fetch the 'safe' version of the two commands. It will download the remote content but not update your local repo's working state, leaving your current work intact. git pull is the more aggressive alternative; it will download the remote content for the active local branch and immediately execute git merge to create a merge commit for the new remote content. If you have pending changes in progress this will cause conflicts and kick-off the merge conflict resolution flow.


git clone
git push origin <tagname> --tags
git stash

